배열을 트리로 표현했을때

0번이 뿌리인 트리에서
n번째 노드의 부모 노드 찾는 방법
(n-1)//2
n번째 노드의 왼쪽 자식 노드 찾는 방법
2n+1
n번째 노드의 오른쪽 자식 노드 찾는 방법
2n+2

n번째 노드의 왼쪽 자식이 있는지 확인하는 방법
2n+1 < treesize


1번이 뿌리인 트리에서
n번째 노드의 부모 노드 찾는 방법
n//2
n번째 노드의 왼쪽 자식 노드 찾는 방법
2n
n번째 노드의 오른쪽 자식 노드 찾는 방법
2n+1
n번째 노드의 왼쪽 자식이 있는지 확인하는 방법
2n <= treesize

완전 이진 트리
자식이 있는 노드는 모든 노드의 갯수의 절반

downheap (과정 시험에 나옴)
왼쪽트리와 오른쪽트리 둘다 힙상태여야함
시작지점은 모든 노드의 갯수의 절반번호부터 ex) treesize = 20, 10번노드까지 자식노드가 있음.
자식노드와 비교해서 내가 작으면 내려간다.
안내려갈때까지 내려간다.

결과로 maxheap 상태가 된다.


minheap 만드는 방법
downheap시키고 뿌리와 마지막 노드의 위치를 바꾸고 자른다. 노드의 수 1감소
반복한다.(뿌리노드를 제외하고 힙상태이므로 뿌리만 옮기면 된다.)

for 루프(n-1) 수행
downheap 시간 logn

시간복잡도 nlogn=(n-1)*logn
최선,최악,평균 다 nlogn임
안정성하지 않음

힙 정렬의 특성
큰 입력에 대해 downheap을 수행할 때 너무 많은 캐시 미스로 인해 페이지 부재를 야기시킴


n^2 정렬중 선택정렬이 제일빠름(교환횟수가 매우적음)
삽입정렬은 대략 정렬되어있는 상태일때 씀
그래서 삽입이 빠르다는 말도 있지만
같은 무작위로 정렬된 자료일 경우 선택정렬이 빠름



비교정렬 중 가장 빠른건(하한) nlogn
비교정렬: 버블, 선택, 삽입 ,쉘 등등


기수정렬: 얘는 비교정렬이 아님
기수 정렬은 제한적인 범위 내에 있는 숫자에 대해 각 자릿수 별로 정렬함
기: 특정 진수를 나타냄 ex)2진수. 10진수

